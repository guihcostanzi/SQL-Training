/* Triggers */

/* É POSSÍVEL AUTOMATIZAR COMANDOS SQL ATRAVÉS DAS TRIGGERS. 

A TRIGGER PODE SER ACIONADA ANTES E DEPOIS DE 3 OPERAÇÕES : UPDATE, DELETE E INSERT.

NÃO SE PODE DEFINIR DUAS TRIGGERS PARA OCORREREM AO MESMO TEMPO PARA UM MESMO EVENTO, EM UMA MESMA TABELA.

OU SEJA, PARA UMA 'TABELA X', SE PODE DEFINIR APENAS UMA TRIGGER PARA OCORRER EM 'AFTER INSERT'. MAS,
SE PODE DEFINIR UMA OUTRA TRIGGER PARA OCORRER EM 'AFTER INSERT' NA 'TABELA Z'.

AS PALAVRAS NEW E OLD PERMITEM SELECIONAR ENTRE INFORMAÇÕES ANTES DA MUDANÇA, E APÓS A MUDANÇA.
POR EXEMPLO :

INSERT INTO BKP_PRODUTOS ( NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NEW.VALOR, NOW());

NESTE CASO, OLD.VALOR TRARÁ O NOME ANTIGO, ANTES DA ALTERAÇÃO, E NEW.VALOR O VALOR NOVO, APÓS A ALTERAÇÃO.

-- OPERAÇÕES EM TABELAS DE OUTROS BANCOS --

USE OFICINA;

EX : INSERT INTO BACKUP.TABELA VALUES(X, Y, Z); 

OBS : PERCEBA QUE FOI APONTADO O BANCO DE DADOS EM QUE A TABELA ESTÁ ATRAVÉS DO PONTEIRO BACKUP. , OU SEJA, ESTÁ NA DATABASE BACKUP.
COM ISSO, FOI POSSÍVEL REALIZAR ESSE INSERT MESMO NÃO ESTANDO NA DATABASE BACKUP, MAS NA DATABASE OFICINA.

-- SINTAXE --

DELIMITER $

CREATE TRIGGER <NOME> 
<AFTER/BEFORE> <UPDATE/INSERT/DELETE>
ON <TABELA>
FOR EACH ROW
BEGIN
<corpo do código>
END
$

DELIMITER ;
*/

/* BANCOS E TABELAS PARA EXEMPLO */

CREATE DATABASE OFICINA;

USE OFICINA;

CREATE TABLE PRODUTOS (
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	VALOR FLOAT(6,2) NOT NULL
);

CREATE DATABASE BACKUP_OFICINA;

USE BACKUP_OFICINA;

CREATE TABLE BKP_PRODUTOS_UPDATE (
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT NOT NULL,
	NOME VARCHAR(30) NOT NULL,
	VALOR_ANTIGO FLOAT(6,2) NOT NULL,
	VALOR_NOVO FLOAT(6,2) NOT NULL,
	DATA_EVENTO DATE
);

CREATE TABLE BKP_PRODUTOS_DELETE_INSERT (
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT NOT NULL,
	NOME VARCHAR(30) NOT NULL,
	VALOR FLOAT(6,2) NOT NULL,
	DATA_EVENTO DATE,
	EVENTO ENUM ('D', 'I')
);

USE OFICINA;

/* TRIGGERS */

/* BACKUP APÓS UPDATE */

DELIMITER $

CREATE TRIGGER TRG_BKP_PRODUTOS_U
AFTER UPDATE
ON PRODUTOS
FOR EACH ROW 
BEGIN 
INSERT INTO BACKUP_OFICINA.BKP_PRODUTOS_UPDATE VALUES ( NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NEW.VALOR, NOW()); 
END                                                                                                     
$

DELIMITER ;

/* BACKUP PRODUTOS APÓS DELETE */


DELIMITER $

CREATE TRIGGER TRG_BACKUP_PRODUTOS_D
AFTER DELETE 
ON PRODUTOS
FOR EACH ROW
BEGIN
INSERT INTO BACKUP_OFICINA.BKP_PRODUTOS_DELETE_INSERT VALUES ( NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NOW(), 'D'); 
END
$

DELIMITER ;

/* BACKUP PRODUTOS APÓS INSERT */

DELIMITER $

CREATE TRIGGER TRG_BACKUP_PRODUTOS_I
AFTER INSERT
ON PRODUTOS 
FOR EACH ROW
BEGIN
INSERT INTO BACKUP_OFICINA.BKP_PRODUTOS_DELETE_INSERT VALUES ( NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR, NOW(), 'I'); 
END
$

DELIMITER ;

/* TRIGGERS PODEM SER UTILIZADAS PARA MUITAS OUTRAS FINALIDADES. PARA REGISTRAR QUEM FEZ CADA ALTERAÇÃO POR EXEMPLO, 
CRIANDO UMA TRIGGER COM UM CAMPO USUÁRIO , RECEBENDO CURRENT_USER().*/

